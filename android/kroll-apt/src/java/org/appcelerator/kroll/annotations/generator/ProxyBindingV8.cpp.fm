/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2011-2016 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */

/** This code is generated, do not edit by hand. **/
<#import "ProxyBinding.fm" as Proxy>

#include "${packageName}.${proxyClassName}.h"

#include "AndroidUtil.h"
#include "EventEmitter.h"
#include "JNIUtil.h"
#include "JSException.h"
#include "Proxy.h"
#include "ProxyFactory.h"
#include "TypeConverter.h"
#include "V8Util.h"

<#if isModule>

<@Proxy.listChildModules ; isFirst, childModule>
#include "${childModule.proxyClassName}.h"
</@Proxy.listChildModules>

<@Proxy.listCreateProxies ; isFirst, createProxy>
#include "${createProxy.proxyClassName}.h"
</@Proxy.listCreateProxies>
</#if>

<#if superProxyClassName??>
#include "${superPackageName}.${superProxyClassName}.h"
</#if>

#define TAG "${proxyClassName}"

using namespace v8;

<@Proxy.openNamespace/>

<#assign className = Proxy.className(proxyClassName)>

Persistent<FunctionTemplate> ${className}::proxyTemplate;
jclass ${className}::javaClass = NULL;

${className}::${className}(jobject javaObject) : titanium::Proxy(javaObject)
{
}

void ${className}::bindProxy(Local<Object> exports, Local<Context> context)
{
	Isolate* isolate = context->GetIsolate();

	Local<FunctionTemplate> pt = getProxyTemplate(isolate);
	Local<Function> proxyConstructor = pt->GetFunction(context).ToLocalChecked();
	Local<String> nameSymbol = NEW_SYMBOL(isolate, "${proxyAttrs.name}"); // use symbol over string for efficiency
	<#if isModule>
	Local<Object> moduleInstance = proxyConstructor->NewInstance(context).ToLocalChecked();
	exports->Set(nameSymbol, moduleInstance);
	<#else>
	exports->Set(nameSymbol, proxyConstructor);
	</#if>
}

void ${className}::dispose()
{
	LOGD(TAG, "dispose()");
	if (!proxyTemplate.IsEmpty()) {
		proxyTemplate.Reset();
	}

	<#if superProxyClassName??>
	<@Proxy.superNamespace/>${superProxyClassName}::dispose();
	</#if>
}

Local<FunctionTemplate> ${className}::getProxyTemplate(Isolate* isolate)
{
	if (!proxyTemplate.IsEmpty()) {
		return proxyTemplate.Get(isolate);
	}

	LOGD(TAG, "GetProxyTemplate");

	<#-- Query the class for the Java proxy -->
	javaClass = titanium::JNIUtil::findClass("${packageName?replace('.','/')}/${className}");
	EscapableHandleScope scope(isolate);

	// use symbol over string for efficiency
	Local<String> nameSymbol = NEW_SYMBOL(isolate, "${proxyAttrs.name}");

	Local<FunctionTemplate> t = titanium::Proxy::inheritProxyTemplate(isolate,
	<#if superProxyClassName??>
		<@Proxy.superNamespace/>${superProxyClassName}::getProxyTemplate(isolate)
	<#else>
		titanium::Proxy::baseProxyTemplate.Get(isolate)
	</#if>, javaClass, nameSymbol);

	proxyTemplate.Reset(isolate, t);
	t->Set(titanium::Proxy::inheritSymbol.Get(isolate),
		FunctionTemplate::New(isolate, titanium::Proxy::inherit<${className}>)->GetFunction());

	<#if (useTiContext!false)>
	<#-- this proxy has a TiContext constructor, use the deprecated TiContext for compatibility -->
	titanium::ProxyFactory::registerProxyPair(javaClass, *t, true);
	<#else>
	titanium::ProxyFactory::registerProxyPair(javaClass, *t);
	</#if>

	// Method bindings --------------------------------------------------------
	<@Proxy.listMethods ; isFirst, name, method, signature>
	SetProtoMethod(isolate, t, "${method.apiName}", ${className}::${method.apiName});
	</@Proxy.listMethods>

	Local<ObjectTemplate> prototypeTemplate = t->PrototypeTemplate();
	Local<ObjectTemplate> instanceTemplate = t->InstanceTemplate();

	// Delegate indexed property get and set to the Java proxy.
	instanceTemplate->SetIndexedPropertyHandler(titanium::Proxy::getIndexedProperty,
		titanium::Proxy::setIndexedProperty);

	// Constants --------------------------------------------------------------
	<#if constants??>
	JNIEnv *env = titanium::JNIScope::getEnv();
	if (!env) {
		LOGE(TAG, "Failed to get environment in ${className}");
		//return;
	}

	<@Proxy.listConstants ; isFirst, name, constant>

	<#if (constant.value)??>
		<#if constant.type = "java.lang.String">
		DEFINE_STRING_CONSTANT(isolate, prototypeTemplate, "${name}", "${constant.value}");
		<#elseif constant.type = "int" || constant.type = "long" || constant.type = "short">
		DEFINE_INT_CONSTANT(isolate, prototypeTemplate, "${name}", ${constant.value?c});
		<#else>
		DEFINE_NUMBER_CONSTANT(isolate, prototypeTemplate, "${name}", ${constant.value?c});
		</#if>
	<#else>
		<#if constant.type = "java.lang.String">
		jfieldID field${constant.name} = env->GetStaticFieldID(javaClass, "${constant.name}", "Ljava/lang/String;");
		jobject fieldValue${constant.name} = env->GetStaticObjectField(javaClass, field${constant.name});
		DEFINE_STRING_CONSTANT(isolate, prototypeTemplate, "${name}", fieldValue${constant.name});

		<#elseif constant.type = "short">
		jfieldID field${constant.name} = env->GetStaticFieldID(javaClass, "${constant.name}", "S");
		jshort fieldValue${constant.name} = env->GetStaticShortField(javaClass, field${constant.name});
		DEFINE_INT_CONSTANT(isolate, prototypeTemplate, "${name}", fieldValue${constant.name});

		<#elseif constant.type = "int">
		jfieldID field${constant.name} = env->GetStaticFieldID(javaClass, "${constant.name}", "I");
		jint fieldValue${constant.name} = env->GetStaticIntField(javaClass, field${constant.name});
		DEFINE_NUMBER_CONSTANT(isolate, prototypeTemplate, "${name}", fieldValue${constant.name});

		<#elseif constant.type = "long">
		jfieldID field${constant.name} = env->GetStaticFieldID(javaClass, "${constant.name}", "J");
		jlong fieldValue${constant.name} = env->GetStaticLongField(javaClass, field${constant.name});
		DEFINE_NUMBER_CONSTANT(isolate, prototypeTemplate, "${name}", fieldValue${constant.name});

		<#elseif constant.type = "float">
		jfieldID field${constant.name} = env->GetStaticFieldID(javaClass, "${constant.name}", "F");
		jfloat fieldValue${constant.name} = env->GetStaticFloatField(javaClass, field${constant.name});
		DEFINE_NUMBER_CONSTANT(isolate, prototypeTemplate, "${name}", fieldValue${constant.name});

		<#elseif constant.type = "double">
		jfieldID field${constant.name} = env->GetStaticFieldID(javaClass, "${constant.name}", "D");
		jdouble fieldValue${constant.name} = env->GetStaticDoubleField(javaClass, field${constant.name});
		DEFINE_NUMBER_CONSTANT(isolate, prototypeTemplate, "${name}", fieldValue${constant.name});
		</#if>
	</#if>
	</@Proxy.listConstants>

	</#if>

	// Dynamic properties -----------------------------------------------------
	<@Proxy.listDynamicProperties ; isFirst, name, property, getSignature, setSignature>
	instanceTemplate->SetAccessor(NEW_SYMBOL(isolate, "${name}"),
		<#if property.get>
			${className}::getter_${name}
		<#else>
			titanium::Proxy::getProperty
		</#if>
		<#if property.set>
			, ${className}::setter_${name}
		<#else>
			, titanium::Proxy::onPropertyChanged
		</#if>);
	</@Proxy.listDynamicProperties>

	// Accessors --------------------------------------------------------------
	<@Proxy.listPropertyAccessors ; isFirst, name, getter, setter>
	instanceTemplate->SetAccessor(
		NEW_SYMBOL(isolate, "${name}"),
		titanium::Proxy::getProperty,
		titanium::Proxy::onPropertyChanged);
	DEFINE_PROTOTYPE_METHOD_DATA(isolate, t, "${getter}", titanium::Proxy::getProperty, NEW_SYMBOL(isolate, "${name}"));
	DEFINE_PROTOTYPE_METHOD_DATA(isolate, t, "${setter}", titanium::Proxy::onPropertyChanged, NEW_SYMBOL(isolate, "${name}"));
	</@Proxy.listPropertyAccessors>

	<#if interceptor??>
	instanceTemplate->SetNamedPropertyHandler(${className}::interceptor);
	</#if>
	return scope.Escape(t);
}

// Methods --------------------------------------------------------------------
<@Proxy.listMethods ; isFirst, name, method, signature>
void ${className}::${method.apiName}(const FunctionCallbackInfo<Value>& args)
{
	LOGD(TAG, "${method.apiName}()");
	Isolate* isolate = args.GetIsolate();
	HandleScope scope(isolate);

	<@Proxy.initJNIEnv/>
	<@Proxy.initMethodID className=className name=name signature=signature logOnly=false/>

	Local<Object> holder = args.Holder();
	// If holder isn't the JavaObject wrapper we expect, look up the prototype chain
	if (!JavaObject::isJavaObject(holder)) {
		holder = holder->FindInstanceInPrototypeChain(getProxyTemplate(isolate));
	}

	titanium::Proxy* proxy = titanium::Proxy::unwrap(holder);

	<#if method.args?size &gt; 0>
	<@Proxy.verifyAndConvertArguments method.args method />
	<#else>
	jvalue* jArguments = 0;
	</#if>

	jobject javaProxy = proxy->getJavaObject();
	<@Proxy.callJNIMethod method.args, method.hasInvocation, method.returnType,
		"methodID", "javaProxy", "jArguments", (method.returnType != "void") ; hasResult, resultVar>

	<#if hasResult>
	args.GetReturnValue().Set(${resultVar});
	<#else>
	args.GetReturnValue().Set(v8::Undefined(isolate));
	</#if>

	</@Proxy.callJNIMethod>
}
</@Proxy.listMethods>

// Dynamic property accessors -------------------------------------------------
<@Proxy.listDynamicProperties ; isFirst, name, property, getSignature, setSignature>

<#if property.get>
void ${className}::getter_${name}(Local<Name> property, const PropertyCallbackInfo<Value>& args)
{
	Isolate* isolate = args.GetIsolate();
	HandleScope scope(isolate);

	<@Proxy.initJNIEnv/>
	<@Proxy.initMethodID className=className name=property.getMethodName signature=getSignature logOnly=false/>

	titanium::Proxy* proxy = titanium::Proxy::unwrap(args.Holder());

	if (!proxy) {
		args.GetReturnValue().Set(Undefined(isolate));
		return;
	}

	jvalue* jArguments = 0;

	jobject javaProxy = proxy->getJavaObject();
	<@Proxy.callJNIMethod property.getMethodArgs, property.getHasInvocation, property.getReturnType,
		"methodID", "javaProxy", "jArguments", (property.getReturnType != "void") ; hasResult, resultVar>

	args.GetReturnValue().Set(${resultVar});

	</@Proxy.callJNIMethod>
}
</#if>

<#if property.set>
void ${className}::setter_${name}(Local<Name> property, Local<Value> value, const PropertyCallbackInfo<void>& args)
{
	Isolate* isolate = args.GetIsolate();
	HandleScope scope(isolate);

	JNIEnv *env = titanium::JNIScope::getEnv();
	if (!env) {
		LOGE(TAG, "Failed to get environment, ${name} wasn't set");
		return;
	}

	<@Proxy.initMethodID className=className name=property.setMethodName signature=setSignature logOnly=true />

	titanium::Proxy* proxy = titanium::Proxy::unwrap(args.Holder());
	if (!proxy) {
		return;
	}

	jvalue jArguments[1];
	<#assign typeInfo = Proxy.getTypeInfo(property.setMethodArgs[0].type)>

	<@Proxy.verifyAndConvertArgument expr="value" index=0 info=typeInfo logOnly=true isOptional=false/>

	jobject javaProxy = proxy->getJavaObject();
	<@Proxy.callJNIMethod property.setMethodArgs, property.setHasInvocation, property.setReturnType, "methodID", "javaProxy", "jArguments", false ;
		hasResult, resultVar>
	</@Proxy.callJNIMethod>

	<#--
	Store the value in the property map if there is not getter.
	Otherwise you can never read back the value that was last set.
	-->
	<#if property.get == false>
	Proxy::setProperty(property, value, args);
	</#if>
}
</#if>

</@Proxy.listDynamicProperties>

<#if interceptor??>
void ${className}::interceptor(Local<String> property, const v8::PropertyCallbackInfo<Value>& args)
{
	Isolate* isolate = args.GetIsolate();
	HandleScope scope(isolate);

	<@Proxy.initJNIEnv/>
	<@Proxy.initMethodID className=className name=interceptor.name signature="(Ljava/lang/String;)Ljava/lang/Object;" logOnly=false/>

	titanium::Proxy* proxy = titanium::Proxy::unwrap(args.Holder());

	if (!proxy) {
		args.GetReturnValue().Set(Undefined(isolate));
		return;
	}

	jobject javaProxy = proxy->getJavaObject();
	jstring javaProperty = titanium::TypeConverter::jsStringToJavaString(env, property);
	jobject jResult = (jobject) env->CallObjectMethod(javaProxy, methodID, javaProperty);

	if (!JavaObject::useGlobalRefs) {
		env->DeleteLocalRef(javaProxy);
	}
	env->DeleteLocalRef(javaProperty);

	if (env->ExceptionCheck()) {
		Local<Value> jsException = titanium::JSException::fromJavaException(isolate);
		env->ExceptionClear();
		args.GetReturnValue().Set(jsException);
		return;
	}

	if (jResult == NULL) {
		args.GetReturnValue().Set(Null(isolate));
		return;
	}

	Local<Value> v8Result = titanium::TypeConverter::javaObjectToJsValue(isolate, env, jResult);
	env->DeleteLocalRef(jResult);

	if (v8Result->IsNumber()) {
		int32_t intResult = v8Result->Int32Value();

		if (intResult == titanium::JNIUtil::krollRuntimeDontIntercept) {
			args.GetReturnValue().Set(Local<Value>());
			return;
		}
	}

	args.GetReturnValue().Set(v8Result);
}
</#if>

<@Proxy.closeNamespace/>
