/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2011-2016 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * Warning: This file is GENERATED, and should not be modified
 */
#include <jni.h>
#include <v8.h>

#include <AndroidUtil.h>
#include <KrollBindings.h>
#include <V8Util.h>

#include "BootstrapJS.cpp"
#include "KrollGeneratedBindings.cpp"

#define TAG "<%- moduleId %>"

using namespace v8;

static Persistent<Object> bindingCache;

static Local<Value> <%- className %>_getBinding(onst FunctionCallbackInfo<Value>& args)
{
	Isolate* isolate = args.GetIsolate();
	EscapableHandleScope scope(isolate);

	if (args.Length() == 0) {
		isolate->ThrowException(Exception::Error(String::NewFromOneByte(isolate, "<%- className %>.getBinding requires 1 argument: binding")));
		return;
	}

	Local<Object> cache;
	if (bindingCache.IsEmpty()) {
		cache = Object::New(isolate);
		bindingCache.Reset(isolate, cache);
	} else {
		cache = bindingCache.Get(isolate);
	}

	Local<String> binding = args[0]->ToString(isolate);

	if (cache->Has(binding)) {
		return scope.Escape(cache->Get(binding));
	}

	titanium::Utf8Value bindingValue(binding);
	LOGD(TAG, "Looking up binding: %s", *bindingValue);

	titanium::bindings::BindEntry *extBinding = ::<%- className %>Bindings::lookupGeneratedInit(
		*bindingValue, bindingValue.length());

	if (!extBinding) {
		LOGE(TAG, "Couldn't find binding: %s, returning undefined", *bindingValue);
		return scope.Escape(Undefined());
	}

	Local<Object> exports = Object::New(isolate);
	extBinding->bind(exports, isolate.GetCurrentContext());
	cache->Set(binding, exports);

	return scope.Escape(exports);
}

static void <%- className %>_init(Local<Object> exports, Local<Context> context)
{
	Isolate* isolate = context->GetIsolate();
	HandleScope scope(isolate);

	for (int i = 0; titanium::natives[i].name; ++i) {
		Local<String> name = String::NewFromOneByte(isolate, titanium::natives[i].name);
		Local<String> source = IMMUTABLE_STRING_LITERAL_FROM_ARRAY(
			titanium::natives[i].source, titanium::natives[i].source_length);

		exports->Set(name, source);
	}

	exports->Set(String::NewFromOneByte(isolate, "getBinding"), FunctionTemplate::New(isolate, <%- className %>_getBinding)->GetFunction(context).ToLocalChecked());
}

static void <%- className %>_dispose()
{
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	if (bindingCache.IsEmpty()) {
		return;
	}

	Local<Array> propertyNames = bindingCache.Get(isolate)->GetPropertyNames();
	uint32_t length = propertyNames->Length();

	for (uint32_t i = 0; i < length; ++i) {
		titanium::Utf8Value binding(propertyNames->Get(i));
		int bindingLength = binding.length();

		titanium::bindings::BindEntry *extBinding =
			::<%- className %>Bindings::lookupGeneratedInit(*binding, bindingLength);

		if (extBinding && extBinding->dispose) {
			extBinding->dispose();
		}
	}

	bindingCache.Reset();
}

static titanium::bindings::BindEntry <%- className %>Binding = {
	"<%- moduleId %>",
	<%- className %>_init,
	<%- className %>_dispose
};

// Main module entry point
extern "C" JNIEXPORT void JNICALL
Java_<%- jniPackage %>_<%- className %>Bootstrap_nativeBootstrap
	(JNIEnv *env, jobject self)
{
	titanium::KrollBindings::addExternalBinding("<%- moduleId %>", &<%- className %>Binding);
	titanium::KrollBindings::addExternalLookup(&(::<%- className %>Bindings::lookupGeneratedInit));
}
